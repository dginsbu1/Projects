MODULE newSymbol(symbol, sub)
VAR
	output: {"-", "+"};
	--plus: boolean;
ASSIGN 
	output := case
			symbol = "+" & sub = 0 : "+";
			symbol = "+" & sub > 0 : {"+","-"};

			symbol = "-" & sub >= 0 : "-"; 
			esac;
DEFINE 
	remaining := case
		symbol = "+" & output = "-" : sub - 1;
		--symbol = "+" & output = "+" : sub;
		--symbol = "-" & output = "-" : sub; 
		TRUE 						: sub;
		esac;
	plus := (output = "+");



MODULE newNumSubMatch(number, sub) -- assume eight for now
VAR
	output: {0,1,2,3,4,5,6,7,8,9};
ASSIGN 
	output := case
		
		number = 0 & sub = 0 : {0};
		number = 0 & sub = 1 : {0};
		number = 0 & sub = 2 : {0};
		number = 0 & sub = 3 : {0,7};
		number = 0 & sub >= 4  : {0,7,1};

		number = 1 & sub >= 0: {1};

		number = 2 & sub >= 0: {2};

		number = 3 & sub = 0 : {3};
		number = 3 & sub = 1 : {3};
		number = 3 & sub = 2 : {3,7};
		number = 3 & sub >= 2: {3,7,1};

		number = 4 & sub = 0 : {4};
		number = 4 & sub = 1 : {4};
		number = 4 & sub > 1 : {4,1};

		number = 5 & sub >= 0: {5};
		
		number = 6 & sub = 0 : {6};
		number = 6 & sub > 0 : {6,5};

		number = 7 & sub = 0 : {7};
		number = 7 & sub > 0 : {7,1};

		number = 8 & sub = 0 : {8};
		number = 8 & sub = 1 : {8,0,6,9};
		number = 8 & sub = 2 : {8,0,6,9,2,3,5};
		number = 8 & sub = 3 : {8,0,6,9,2,3,5,4};
		number = 8 & sub = 4 : {8,0,6,9,2,3,5,4,7};
		number = 8 & sub = 5 : {8,0,6,9,2,3,5,4,7,1};
		number = 8 & sub > 5 : {8,0,6,9,2,3,5,4,7,1};
					
		number = 9 & sub = 0 : {9};
		number = 9 & sub = 1 : {9,3,5};
		number = 9 & sub = 2 : {9,3,5,4};
		number = 9 & sub = 3 : {9,3,5,4,7};
		number = 9 & sub > 3 : {9,3,5,4,7,1};

		esac;

DEFINE
	remaining := case 
		number = 0 & output= 0 : sub;
		number = 0 & output= 7 : sub - 3;
		number = 0 & output= 1 : sub - 4;

		number = 1 & output= 1 : sub;

		number = 2 & output= 2 : sub;

		number = 3 & output= 3 : sub;
		number = 3 & output= 7 : sub - 2;
		number = 3 & output= 1 : sub - 3;

		number = 4 & output= 4 : sub;
		number = 4 & output= 1 : sub - 2;

		number = 5 & output= 5 : sub;

		number = 6 & output= 6 : sub;
		number = 6 & output= 5 : sub - 1;

		number = 7 & output= 7 : sub;
		number = 7 & output= 1 : sub - 1;

		number = 8 & output= 8 : sub;
		number = 8 & output= 0 : sub - 1;
		number = 8 & output= 6 : sub - 1;
		number = 8 & output= 9 : sub - 1;
		number = 8 & output= 2 : sub - 2;
		number = 8 & output= 3 : sub - 2;
		number = 8 & output= 5 : sub - 2;
		number = 8 & output= 4 : sub - 3;
		number = 8 & output= 7 : sub - 4;
		number = 8 & output= 1 : sub - 5;

		number = 9 & output= 9 : sub;
		number = 9 & output= 3 : sub - 1;
		number = 9 & output= 5 : sub - 1;
		number = 9 & output= 4 : sub - 2;
		number = 9 & output= 7 : sub - 3;
		number = 9 & output= 1 : sub - 4;
		TRUE : sub;
		esac;

-------------------------------------------------------------
MODULE main
VAR
	--randomNum: {0,1,2,3,4,5,6,7,8,9};
	--randomSub: 0..5;
	--output   : 0..9;
	-- 8 - 8 = 7 -> 9 - 8 = 1;
	--sub1 : [8,8,7]; 2
	--sub2 : [7,2,8]; 2
	--sub3: [3,9,9]; 5 
	--sub4 [4,7,8] 3
	--sub5  [5,9,7] 3;
	
	--add1 [8,7,5] 3 
	--add2 [6,0,7] 4 
	a : newNumSubMatch(2, 3);
	b : newNumSubMatch(4, a.remaining);
	c : newNumSubMatch(7, b.remaining);
	d : newSymbol("+", c.remaining);

LTLSPEC G (! ((d.remaining = 0) & ( ( (a.output - b.output = c.output) & !d.plus) | ((a.output + b.output = c.output) & d.plus)))  );
--LTLSPEC G(!((a.output - b.output = c.output)    & ));
--ASSIGN
--	init(randomNum) := 8;
--	init(randomSub) := 3;
--	init(output)    := 8;
--	next(output)    := newNumSubMatch(output, randomSub);
--FAIRNESS c.remaining > -1;


--G((token.x = zero | token.x = five | token.x = plus)  |
--		  (token.x = one  | token.x = six  | token.x = minus) |
--		  (token.x = two  | token.x = seven| token.x = times) |
--		  (token.x = three| token.x = eight| token.x = equals)|
--		  (token.x = four | token.x = nine) );

-- zero, one, two, three, four, five, six, seven, eight, nine, minus, plus, times, equals

 --[1,2,3,4,5,6,11],[1,2],[1,3,4,6,11],[1,2,3,6,11],[1,2,5,6],[2,3,5,6,11],[2,3,4,5,6,11],[1,2,11],[1,2,3,4,5,6,11],[1,2,3,5,6,11],[9,10],[6],[9,10],[6,7];










 ----------------------
MODULE item(input)
DEFINE
	zero  	:= [1,2,3,4,5,6,11];
	one 	:= [1,2];
	two   	:= [1,3,4,6,11];
	three 	:= [1,2,3,6,11];
	four 	:= [1,2,5,6];
	five 	:= [2,3,5,6,11];
	six 	:= [2,3,4,5,6,11];
	seven	:= [1,2,11]; 
	eight 	:= [1,2,3,4,5,6,11];
	nine 	:= [1,2,3,5,6,11];

	plus 	:= [9,10];
	minus	:= [6];
	times	:= [9,10];
	equals 	:= [6,7];
	d       := [[1,2,3,4,5,6,11],[1,2],[1,3,4,6,11],[1,2,3,6,11],[1,2,5,6],[2,3,5,6,11],[2,3,4,5,6,11],[1,2,11],[1,2,3,4,5,6,11],[1,2,3,5,6,11],[9,10],[6],[9,10],[6,7]];
VAR 
	--x: array 1 of {[1,2,3,4,5,6,11],[1,2],[1,3,4,6,11],[1,2,3,6,11],[1,2,5,6],[2,3,5,6,11],[2,3,4,5,6,11],[1,2,11],[1,2,3,4,5,6,11],[1,2,3,5,6,11],[9,10],[6],[9,10],[6,7]};
	--x : ({[1,2,3,4,5,6,11],[1,2],[1,3,4,6,11],[1,2,3,6,11],[1,2,5,6],[2,3,5,6,11],[2,3,4,5,6,11],[1,2,11],[1,2,3,4,5,6,11],[1,2,3,5,6,11],[9,10],[6],[9,10],[6,7]});
ASSIGN
	init(x) := eight;  
	next(x) := (eight[{1..6}] = 0); 


--------------------------------------