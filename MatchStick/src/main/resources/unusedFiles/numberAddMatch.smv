MODULE newSymbol(symbol, add)
VAR
	output: {"-", "+"};
ASSIGN 
	output := case
			symbol = "-" & add = 0  : "-";
			symbol = "-" & add > 0  : {"+","-"};
			symbol = "+" & add >= 0 : "+"; 
			TRUE                    : symbol;
			esac;
DEFINE 
	remaining := case
		symbol = "-" & output = "+" : add - 1;
		TRUE 						: add;
		esac;
	plus := (output = "+");
----------------------------------------------------------
MODULE newNumAddMatch(number, add)

VAR
	output: {0,1,2,3,4,5,6,7,8,9};
ASSIGN 
	output := case
		
		number = 0 & add = 0 : {0};
		number = 0 & add >= 1 : {0,8};

		number = 1 & add = 0: {1};
		number = 1 & add = 1: {1,7};
		number = 1 & add = 2: {1,7,4};
		number = 1 & add = 3: {1,7,4,3,9};
		number = 1 & add = 4: {1,7,4,3,9,0};
		number = 1 & add >= 5: {1,7,4,3,9,0,8};

		number = 2 & add = 0: {2};
		number = 2 & add = 1: {2};
		number = 2 & add >= 2 : {2,8};

		number = 3 & add = 0  : {3};
		number = 3 & add = 1  : {3,9};
		number = 3 & add >= 2 : {3,9,8};

		number = 4 & add = 0  : {4};
		number = 4 & add = 1  : {4};
		number = 4 & add = 2  : {4,9};
		number = 4 & add >= 3 : {4,9,8};

		number = 5 & add = 0  : {5};
		number = 5 & add = 1  : {5,6,9};
		number = 5 & add >= 2 : {5,6,9,8};
		
		number = 6 & add = 0  : {6};
		number = 6 & add >= 1 : {6,8};

		number = 7 & add = 0  : {7};
		number = 7 & add = 1  : {7};
		number = 7 & add = 2  : {7,3};
		number = 7 & add = 3  : {7,3,0,9};
		number = 7 & add >= 4 : {7,3,0,9,8};

		number = 8 & add >= 0 : {8};
					
		number = 9 & add = 0  : {9};
		number = 9 & add >= 1 : {9,8};
		esac;

DEFINE
	remaining := case 
		number = 0 & output= 0 : add;
		number = 0 & output= 8 : add - 1;

		number = 1 & output= 1 : add;
		number = 1 & output= 7 : add - 1;
		number = 1 & output= 4 : add - 2;
		number = 1 & output= 3 : add - 3;
		number = 1 & output= 9 : add - 4;
		number = 1 & output= 0 : add - 4;
		number = 1 & output= 8 : add - 5;

		number = 2 & output= 2 : add;
		number = 2 & output= 8 : add - 2;

		number = 3 & output= 3 : add;
		number = 3 & output= 9 : add - 1;
		number = 3 & output= 8 : add - 2;

		number = 4 & output= 4 : add;
		number = 4 & output= 9 : add - 2;
		number = 4 & output= 8 : add - 3;

		number = 5 & output= 5 : add;
		number = 5 & output= 6 : add - 1;
		number = 5 & output= 9 : add - 1;
		number = 5 & output= 8 : add - 2;

		number = 6 & output= 6 : add;
		number = 6 & output= 8 : add - 1;

		number = 7 & output= 7 : add;
		number = 7 & output= 3 : add - 2;
		number = 7 & output= 0 : add - 3;
		number = 7 & output= 9 : add - 3;
		number = 7 & output= 8 : add - 4;


		number = 8 & output= 8 : add;

		number = 9 & output= 9 : add;
		number = 9 & output= 8 : add - 1;
		
		TRUE : add;
		esac;
-----------------------------------------
MODULE main
VAR
--sub1: [4,0,5]; 3
--sub2: [2,2,5]; 3
--sub3: [4,0,7]; 5
--sub4: [4,5,3]: 2
--sub5: [5,1,1]; 2
--sub6: [9,0,1]; 1
--add1: [1,2,1]: 3

	a : newNumAddMatch(1, 14);
	b : newNumAddMatch(1, a.remaining);
	c : newNumAddMatch(1, b.remaining);
	d : newSymbol("+", c.remaining);

LTLSPEC G (! ((d.remaining = 0) & ( ( (a.output - b.output = c.output) & !d.plus) | ((a.output + b.output = c.output) & d.plus)))  );
